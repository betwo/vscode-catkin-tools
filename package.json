{
  "name": "b2-catkin-tools",
  "displayName": "catkin-tools",
  "publisher": "betwo",
  "license": "MIT",
  "description": "Support for catkin_tools workspaces",
  "version": "4.7.0",
  "icon": "assets/icon.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/betwo/vscode-catkin-tools"
  },
  "engines": {
    "vscode": "^1.68.0"
  },
  "categories": [
    "Other",
    "Testing"
  ],
  "keywords": [
    "catkin-tools",
    "catkin",
    "colcon",
    "build",
    "multi-root ready"
  ],
  "activationEvents": [
    "*"
  ],
  "main": "./dist/extension",
  "contributes": {
    "taskDefinitions": [
      {
        "type": "catkin_build",
        "properties": {
          "task": {
            "type": "string",
            "description": "The catkin build task to run {build, build current package, run current package tests} "
          },
          "package": {
            "type": "string",
            "description": "(optional) The package to build."
          }
        }
      },
      {
        "type": "colcon",
        "properties": {
          "task": {
            "type": "string",
            "description": "The colcon build task to run {build, build current package, run current package tests} "
          }
        }
      }
    ],
    "configuration": [
      {
        "title": "catkin tools settings",
        "properties": {
          "catkin_tools.shell": {
            "type": "string",
            "enum": [
              "bash",
              "sh",
              "zsh"
            ],
            "default": "bash",
            "description": "Shell to use for catkin commands. Also determines which `setup.<shell>` file is loaded."
          },
          "catkin_tools.defaultRosWorkspaces": {
            "type": "array",
            "default": [],
            "description": "A list of paths to use when searching for the default ros workspace. When empty, /opt/ros will be searched."
          },
          "catkin_tools.cppStandard": {
            "type": "string",
            "default": "c++11",
            "description": "C++ standard to use as fallback if no compile_commands are found (see C_CPP extension)"
          },
          "catkin_tools.useInstallSpace": {
            "type": "boolean",
            "default": "true",
            "description": "Flag to source from install space instead of devel space"
          },
          "catkin_tools.intelliSenseMode": {
            "type": "string",
            "default": "gcc-x64",
            "description": "Compiler to emulate (see C_CPP extension)"
          },
          "catkin_tools.mergedCompileCommandsJsonPath": {
            "type": "string",
            "default": "",
            "description": "If non empty, all compile_commands.json files are merged and written to this path.\n You can use ${workspaceFolder} here. The variable will be replaced with all folders added to this workspace."
          },
          "catkin_tools.gtestMacroRegex": {
            "type": "array",
            "default": [
              "^\\s*catkin_add_gtest",
              "^\\s*ament_add_gtest",
              "^\\s*[^\\s\\(]*add[^\\s\\(]*test"
            ],
            "description": "Regular expression(s) to check a CMakeLists.txt file for (possible) GTest targets"
          },
          "catkin_tools.testCompileOutputEnabled": {
            "type": "boolean",
            "default": true,
            "description": "If true, show compiler output when building tests."
          },
          "catkin_tools.recursiveHeaderParsingEnabled": {
            "type": "boolean",
            "default": false,
            "description": "If true, parse recursive package dependencies for header file resolution (experimental)."
          },
          "catkin_tools.colconSupportEnabled": {
            "type": "boolean",
            "default": false,
            "description": "If true, try to use colcon as build backend if possible (experimental)."
          },
          "catkin_tools.additionalEnvironmentVariables": {
            "type": "array",
            "default": [],
            "description": "Environment varibles that are injected before running catkin commands. Must be of the form 'KEY=VALUE'"
          }
        }
      }
    ],
    "commands": [
      {
        "command": "extension.b2.catkin_tools.reload_workspaces",
        "title": "Reload all opened workspaces"
      },
      {
        "command": "extension.b2.catkin_tools.reload_compile_commands",
        "title": "Reload / Merge compile commands (see mergedCompileCommandsJsonPath)"
      },
      {
        "command": "extension.b2.catkin_tools.switch_profile",
        "title": "Change active catkin_tools profile"
      },
      {
        "command": "extension.b2.catkin_tools.build_tests",
        "title": "Build tests in package",
        "category": "Test",
        "icon": "$(package)"
      },
      {
        "command": "extension.b2.catkin_tools.reload_tests",
        "title": "Reload tests in package",
        "category": "Test",
        "icon": "$(refresh)"
      }
    ],
    "menus": {
      "testing/item/context": [
        {
          "command": "extension.b2.catkin_tools.build_tests",
          "group": "inline"
        },
        {
          "command": "extension.b2.catkin_tools.reload_tests",
          "group": "inline"
        }
      ]
    },
    "problemMatchers": [
      {
        "name": "catkin-gcc",
        "fileLocation": "absolute",
        "owner": "catkin",
        "pattern": {
          "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
          "file": 1,
          "line": 2,
          "column": 3,
          "severity": 4,
          "message": 5
        }
      },
      {
        "name": "catkin-cmake",
        "fileLocation": "absolute",
        "owner": "catkin",
        "pattern": [
          {
            "regexp": "^CMake\\s+(Warning|Error)\\s+at\\s+(\\S+):(\\d+)\\s*(.*):\\s*$",
            "file": 2,
            "line": 3,
            "severity": 1
          },
          {
            "regexp": "^(.*|\\s{2}.*|Call Stack.*)$",
            "message": 1,
            "loop": true
          }
        ]
      },
      {
        "name": "catkin-gtest-failed",
        "fileLocation": "absolute",
        "owner": "catkin",
        "pattern": [
          {
            "regexp": "^(\\S+):(\\d+):\\s*(Failure\\s*)$",
            "file": 1,
            "line": 2,
            "severity": 4,
            "message": 3
          },
          {
            "regexp": "^Failed$",
            "message": 1
          }
        ]
      },
      {
        "name": "catkin-gtest",
        "fileLocation": "absolute",
        "owner": "catkin",
        "pattern": [
          {
            "regexp": "^(\\S+):(\\d+):\\s*(Failure\\s*)$",
            "file": 1,
            "line": 2,
            "severity": 4,
            "message": 3
          },
          {
            "regexp": "^(Failed|\\s*Value of\\s*:.*)$",
            "message": 1
          },
          {
            "regexp": "^(\\s*Actual\\s*:.*)$",
            "message": 1
          },
          {
            "regexp": "^(\\s*Expected\\s*:.*)$",
            "message": 1
          }
        ]
      }
    ]
  },
  "scripts": {
    "main-set-dist": "sed -i -e \"s/out\\/extension/dist\\/extension/\" package.json",
    "main-set-out": "sed -i -e \"s/dist\\/extension/out\\/extension/\" package.json",
    "prevscode:prepublish": "npm run main-set-dist",
    "vscode:prepublish": "webpack --mode production",
    "precompile": "npm run main-set-out",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "prebuild-docker-images": "npm run main-set-out",
    "build-docker-images": "docker build -f docker/test/catkin_tools.docker . -t vscode-catkin-tools",
    "pretest": "npm run compile",
    "test": "node ./out/test/run_all_tests.js",
    "pretest-headless": "npm run build-docker-images",
    "test-headless": "set -x; /usr/bin/Xvfb :99 -screen 0 1024x768x24 -nolisten tcp 2>&1 & XVFBPID=$!; sleep 1; docker run --rm -e DISPLAY=:99.0 -v /tmp/.X11-unix:/tmp/.X11-unix -e CI=true vscode-catkin-tools bash -c \"npm run test\"; EXIT=$?; echo \"Stopping xvfb\"; kill -9 $XVFBPID; exit $EXIT",
    "preunittest": "npm run compile",
    "unittest": "node ./out/test/run_unit_tests.js",
    "preunittest-headless": "npm run compile",
    "unittest-headless": "set -x; /usr/bin/Xvfb :99 -screen 0 1024x768x24 -nolisten tcp 2>&1 & XVFBPID=$!; sleep 1; DISPLAY=:99.0 npm run unittest; EXIT=$?; echo \"Stopping xvfb\"; kill -9 $XVFBPID; exit $EXIT",
    "preintegrationtest": "npm run compile",
    "integrationtest": "node ./out/test/run_integration_tests.js",
    "preintegrationtest-headless": "npm run build-docker-images",
    "integrationtest-headless": "set -x; /usr/bin/Xvfb :99 -screen 0 1024x768x24 -nolisten tcp 2>&1 & XVFBPID=$!; sleep 1; docker run --rm -e DISPLAY=:99.0 -v /tmp/.X11-unix:/tmp/.X11-unix -e CI=true vscode-catkin-tools bash -c \"npm run integrationtest\"; EXIT=$?; echo \"Stopping xvfb\"; kill -9 $XVFBPID; exit $EXIT",
    "preintegrationtest-headless-loop": "npm run build-docker-images",
    "integrationtest-headless-loop": "set -x; /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 & XVFBPID=$!; docker run --rm -e DISPLAY=:99 -v /tmp/.X11-unix:/tmp/.X11-unix -e CI=true vscode-catkin-tools bash -c \"OK=0; ITERATION=0; while [[ \"\\$OK\" == \"0\" ]]; do echo \\\"Begin iteration \\$ITERATION\\\"; npm run integrationtest; OK=\\$?; echo \\\"End iteration \\$ITERATION\\\"; ITERATION=\\$((ITERATION+1)); done\"; EXIT=$?; echo \"Stopping xvfb after ${ITERATION} iterations\"; kill -9 $XVFBPID; exit $EXIT",
    "webpack": "webpack --mode development",
    "webpack-dev": "webpack --mode development --watch"
  },
  "devDependencies": {
    "@types/chai": "^4.3.0",
    "@types/jsonfile": "^5.0.1",
    "@types/mocha": "^9.0.0",
    "@types/node": "^17.0.0",
    "@types/signals": "^1.0.1",
    "@vscode/test-electron": "^1.6.1",
    "chai": "^4.3.4",
    "lodash": "^4.17.21",
    "mocha": "^9.0.0",
    "terser": "^4.8.0",
    "ts-loader": "^9.3.1",
    "tslint": "^5.20.1",
    "typescript": "^4.7.4",
    "webpack": "^5.53.0",
    "webpack-cli": "^4.8.0"
  },
  "dependencies": {
    "child_process": "^1.0.2",
    "fast-glob": "^3.2.6",
    "fast-xml-parser": "^3.19.0",
    "fs": "0.0.1-security",
    "jsonfile": "^5.0.0",
    "signals": "^1.0.0",
    "tree-kill": "^1.2.2",
    "tslog": "^3.3.3",
    "vscode-catkin-tools-api": "file:api",
    "vscode-cpptools": "^2.1.2",
    "vscode-jsonrpc": "^4.0.0"
  },
  "extensionDependencies": [
    "ms-vscode.cpptools"
  ]
}
